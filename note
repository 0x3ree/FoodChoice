- for react navigation it comes with extra dependencies(don't forget)
  React navigation is a component based library: it give you a bunch of components which allow you set up your navigation configuration.
  - when using react navigation you need to create a navigation container but also the other supported navigators(pain)

* When setting up a Navigator (like <Stack.Navigator>) and registering its screens (via <Stack.Screen>), you can decide which screen will be shown as a default when the app starts.

Out of the box, the top-most screen (i.e. the first child inside of <Stack.Navigator>) is used as the initial screen.

I.e., in the following example, the AllProducts screen would be shown as an initial screen when the app starts:

<Stack.Navigator>
<Stack.Screen name="AllProducts" component={AllProducts} /> // initial screen
<Stack.Screen name="ProductDetails" component={ProductDetails} />
</Stack.Navigator>
You can therefore change the initial screen by changing the <Stack.Screen> order. Alternatively, there also is an initialRouteName prop that can be set on the navigator component (i.e., on <Stack.Navigator> in this case):

<Stack.Navigator initialRouteName="ProductDetails">
<Stack.Screen name="AllProducts" component={AllProducts} />
<Stack.Screen name="ProductDetails" component={ProductDetails} /> // initial screen
</Stack.Navigator>

- the useNavigation hook can come in handy when you want to navigate from a screen that's not registered as a screen in the stacknavigator, we get the navigation prop.
- say we wanted to navigate to a screen which isn't registered we can use a prop by calling in the parent component and then destructure (e.g navigation={navigation}) in the registered screen and the alternative is to use the useNavigation hook which works regardless if a screen is registered or not (const navigation = useNavigation(); don't forget to import from native)
  -when passing data between screens we can also use the naviagte, this navigation method takes the name of the screen that we want to navigate to, it also allows us add another parametter (e.g .navigate( "mealsoverview", {categogyId..... }))Route prop, which can also be used on screens registered as a screen. in addition say we wanted to a get the currenly loaded route information in some nedted componated that isn't registered as a screen, we use the {useRoute} which we import from navnative it aslo has the route.params etc,
